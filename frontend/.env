VITE_API_BE_URL="https://bookstoreapi-y81t.onrender.com/api"

Hay üëç, m√¨nh s·∫Ω g·ª£i √Ω cho b·∫°n m·ªôt **th·ª© t·ª± h·ª£p l√Ω khi code frontend** (v√≠ d·ª• React + TypeScript cho mini bookstore).

---

## üöÄ Th·ª© t·ª± code frontend

### 1. **T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c chu·∫©n**

V√≠ d·ª• trong `frontend/`:

```
frontend/
 ‚îú‚îÄ‚îÄ public/                # file tƒ©nh (favicon, index.html, logo,‚Ä¶)
 ‚îú‚îÄ‚îÄ src/
 ‚îÇ   ‚îú‚îÄ‚îÄ api/               # h√†m g·ªçi backend (axios/fetch)
 ‚îÇ   ‚îú‚îÄ‚îÄ assets/            # ·∫£nh, font, css tƒ©nh
 ‚îÇ   ‚îú‚îÄ‚îÄ components/        # component t√°i s·ª≠ d·ª•ng (Button, Navbar,‚Ä¶)
 ‚îÇ   ‚îú‚îÄ‚îÄ hooks/             # custom hooks (useAuth, useFetch,‚Ä¶)
 ‚îÇ   ‚îú‚îÄ‚îÄ layouts/           # layout (MainLayout, AdminLayout,‚Ä¶)
 ‚îÇ   ‚îú‚îÄ‚îÄ pages/             # c√°c trang (Home, Books, Cart, Login,‚Ä¶)
 ‚îÇ   ‚îú‚îÄ‚îÄ routes/            # ƒë·ªãnh nghƒ©a route
 ‚îÇ   ‚îú‚îÄ‚îÄ store/             # Redux/Zustand/Context
 ‚îÇ   ‚îú‚îÄ‚îÄ styles/            # CSS/SCSS/Tailwind config
 ‚îÇ   ‚îú‚îÄ‚îÄ types/             # ƒë·ªãnh nghƒ©a type d√πng chung
 ‚îÇ   ‚îú‚îÄ‚îÄ utils/             # h√†m ti·ªán √≠ch (formatDate, currency,‚Ä¶)
 ‚îÇ   ‚îú‚îÄ‚îÄ App.tsx
 ‚îÇ   ‚îú‚îÄ‚îÄ main.tsx
 ‚îÇ   ‚îî‚îÄ‚îÄ vite-env.d.ts
 ‚îú‚îÄ‚îÄ package.json
 ‚îú‚îÄ‚îÄ tsconfig.json
 ‚îî‚îÄ‚îÄ vite.config.ts
```

---

### 2. **C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng**

* Ch·ªçn c√¥ng c·ª•: `Vite` (nh·∫π, nhanh).
* Ch·∫°y l·ªánh:

  ```bash
  npm create vite@latest frontend -- --template react-ts
  cd frontend
  npm install
  ```
* C√†i th√™m:

  ```bash
  npm install axios react-router-dom@6
  npm install @reduxjs/toolkit react-redux # (n·∫øu d√πng Redux)
  npm install tailwindcss postcss autoprefixer -D
  npx tailwindcss init -p
  ```

---

### 3. **C·∫•u h√¨nh c∆° b·∫£n**

* `tailwind.config.js`
* `.env` ƒë·ªÉ l∆∞u API URL:

  ```
  VITE_API_URL=https://your-backend.onrender.com/api
  ```
* Trong `src/api/axios.ts`:

  ```ts
  import axios from "axios";

  const api = axios.create({
    baseURL: import.meta.env.VITE_API_URL,
    withCredentials: true,
  });

  export default api;
  ```

---

### 4. **T·∫°o router & layout**

* `src/routes/index.tsx`:

  ```tsx
  import { BrowserRouter, Routes, Route } from "react-router-dom";
  import Home from "../pages/Home";
  import Books from "../pages/Books";
  import Login from "../pages/Login";
  import MainLayout from "../layouts/MainLayout";

  const AppRoutes = () => (
    <BrowserRouter>
      <Routes>
        <Route element={<MainLayout />}>
          <Route path="/" element={<Home />} />
          <Route path="/books" element={<Books />} />
        </Route>
        <Route path="/login" element={<Login />} />
      </Routes>
    </BrowserRouter>
  );

  export default AppRoutes;
  ```

* `src/App.tsx`:

  ```tsx
  import AppRoutes from "./routes";
  function App() {
    return <AppRoutes />;
  }
  export default App;
  ```

---

### 5. **X√¢y d·ª±ng t·ª´ng ph·∫ßn**

1. **Navbar + Layout** (components, layouts).
2. **Trang Auth (Login/Register)** ‚Üí g·ªçi API backend.
3. **Trang Books** ‚Üí hi·ªÉn th·ªã list s√°ch t·ª´ API.
4. **Trang Book Detail** ‚Üí fetch 1 s√°ch theo id.
5. **Cart** ‚Üí th√™m/xo√° s√°ch.
6. **Checkout / Payment** (n·∫øu c√≥).

---

### 6. **State management**

* N·∫øu project nh·ªè ‚Üí `useState`, `useContext`.
* N·∫øu l·ªõn h∆°n ‚Üí `Redux Toolkit` ho·∫∑c `Zustand`.

---

### 7. **Refactor & Optimize**

* Gom API call v√†o `src/api`.
* Gom type v√†o `src/types`.
* Gom logic chung v√†o `hooks` & `utils`.
* T√°ch component ƒë·ªÉ t√°i s·ª≠ d·ª•ng.

---

üëâ T√≥m g·ªçn **th·ª© t·ª± code**:

1. Setup project (Vite, Tailwind, Router, Axios).
2. T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c.
3. Config API base.
4. Code layout + route c∆° b·∫£n.
5. Code trang Auth.
6. Code trang Books, Book detail.
7. Code Cart & c√°c t√≠nh nƒÉng kh√°c.
8. Th√™m state management + refactor.

---

B·∫°n mu·ªën m√¨nh **vi·∫øt s·∫µn b·ªô khung React + TS + Tailwind + Router + Axios** (c·∫•u tr√∫c chu·∫©n ƒë·ªÉ b·∫Øt ƒë·∫ßu code bookstore) kh√¥ng
c√≥, v√† b·∫Øt bu·ªôc, √≠ t√¥i l√† s·∫Ω chia ra 1 s·ªë trang d√†nh cho admin nh∆∞ admindashboard, v√† 1 s·ªë trang cho user nh∆∞ home, book, v√† n·∫øu role=user th√¨ d√π cho c√≥ nh·∫≠p url c√°c trang thu·ªôc admindashboard s·∫Ω hi·ªán trang 403 v√¢n v√¢n..., 
v√† quay tr·ªü l·∫°i v·ªõi login, n·∫øu nh∆∞ ·ªü backend n·ªëi tooken v√†o cookie, c√≥ ph·∫£i kh√¥ng c·∫ßn ph·∫£i tr·∫£ v·ªÅ token ·ªü d·∫°ng res.json, th·∫ø l·∫•y token t·ª´ cookie, v√† g·∫Øn token v√†o header c·ªßa application : const axiosClient:AxiosClient = {
  application: axios.create({
    baseURL,

    headers: {
      'content-type': 'application/json',
    },
    paramsSerializer: (params) => queryString.stringify(params),
  }), 
  c√≥ n√™n d√πng useContext cho token or name, thay v√¨ c·ª© m·ªói file tsx li√™n quan l·∫°i ph·∫£i getItem localstorage
  khi click login b·ªã l·ªói :
 tr∆∞·ªõc ƒë√≥ t√¥i c√≥ l√†m 1 d·ª± √°n , v√† trong ƒë√≥ g·∫Øn token v√†o header l√† nh∆∞ th·∫ø n√†y :  axiosClient.application.defaults.headers.common[
        "Authorization"
      ] = `Bearer ${token}`;

      axiosClient.formData.defaults.headers.common[
        "Authorization"
      ] = `Bearer ${token}`;
b√¢y h theo b·∫°n ch·ªâ c·∫ßn nh∆∞ th·∫ø n√†y ∆∞: application: axios.create({
  baseURL,
  headers: { "content-type": "application/json" },
  withCredentials: true, // ƒë·ªÉ g·ª≠i cookie k√®m request
}),, nh∆∞ng m√† tr∆∞·ªõc khi login th√¨ cookies ch∆∞a c√≥ 


c√≤n n·ªØa, gi·∫£ s·ª≠ sau 1 th·ªùi gian khi backend verify header token b·ªã expired, c√≥ ph·∫£i n√™n clear cookie response nh∆∞ khi logout
fix this code : const UserAPI = {
  register: (formData:FormData) => {
    const url = `/user/register`;
    return axiosClient.applicationNoAuth.post(url, formData);
  },
  logout = () =>{
    const url = `/user/logout`;
    return axiosClient.application.get(url);
  }
};
gi·∫£ s·ª≠a frontend th√†nh g√°n header nh∆∞ th·∫ø n√†y th√¨ c√≥ ƒë∆∞·ª£c kh√¥ng

      // Set authenticate token to axios
      axiosClient.application.defaults.headers.common[
        "Authorization"
      ] = `Bearer ${token}`;

      axiosClient.formData.defaults.headers.common[
        "Authorization"
      ] = `Bearer ${token}`;

      ,v√† frontend ƒëang ·ªü local, b√¢y gi·ªù t√¥i c√≥ th·ªÉ set app.use(cors({
  origin: "*",
  credentials: true
})); th√†nh http://localhost:5173" ƒëc 
gi·∫£ s·ª≠ nh∆∞ khi t√¥i d√πng postman ƒë·ªÉ test api th√¨ sao url l√† g√¨, hay ·ªü postman th√¨ c√≥ d√πng ƒëc cookies post kh√¥ng , t·∫°i v√¨ tr∆∞·ªõc ƒë√¢y t√¥i th∆∞·ªùng set author barer token