VITE_API_URL="https://bookstoreapi-y81t.onrender.com/api"

Hay 👍, mình sẽ gợi ý cho bạn một **thứ tự hợp lý khi code frontend** (ví dụ React + TypeScript cho mini bookstore).

---

## 🚀 Thứ tự code frontend

### 1. **Tạo cấu trúc thư mục chuẩn**

Ví dụ trong `frontend/`:

```
frontend/
 ├── public/                # file tĩnh (favicon, index.html, logo,…)
 ├── src/
 │   ├── api/               # hàm gọi backend (axios/fetch)
 │   ├── assets/            # ảnh, font, css tĩnh
 │   ├── components/        # component tái sử dụng (Button, Navbar,…)
 │   ├── hooks/             # custom hooks (useAuth, useFetch,…)
 │   ├── layouts/           # layout (MainLayout, AdminLayout,…)
 │   ├── pages/             # các trang (Home, Books, Cart, Login,…)
 │   ├── routes/            # định nghĩa route
 │   ├── store/             # Redux/Zustand/Context
 │   ├── styles/            # CSS/SCSS/Tailwind config
 │   ├── types/             # định nghĩa type dùng chung
 │   ├── utils/             # hàm tiện ích (formatDate, currency,…)
 │   ├── App.tsx
 │   ├── main.tsx
 │   └── vite-env.d.ts
 ├── package.json
 ├── tsconfig.json
 └── vite.config.ts
```

---

### 2. **Cài đặt môi trường**

* Chọn công cụ: `Vite` (nhẹ, nhanh).
* Chạy lệnh:

  ```bash
  npm create vite@latest frontend -- --template react-ts
  cd frontend
  npm install
  ```
* Cài thêm:

  ```bash
  npm install axios react-router-dom@6
  npm install @reduxjs/toolkit react-redux # (nếu dùng Redux)
  npm install tailwindcss postcss autoprefixer -D
  npx tailwindcss init -p
  ```

---

### 3. **Cấu hình cơ bản**

* `tailwind.config.js`
* `.env` để lưu API URL:

  ```
  VITE_API_URL=https://your-backend.onrender.com/api
  ```
* Trong `src/api/axios.ts`:

  ```ts
  import axios from "axios";

  const api = axios.create({
    baseURL: import.meta.env.VITE_API_URL,
    withCredentials: true,
  });

  export default api;
  ```

---

### 4. **Tạo router & layout**

* `src/routes/index.tsx`:

  ```tsx
  import { BrowserRouter, Routes, Route } from "react-router-dom";
  import Home from "../pages/Home";
  import Books from "../pages/Books";
  import Login from "../pages/Login";
  import MainLayout from "../layouts/MainLayout";

  const AppRoutes = () => (
    <BrowserRouter>
      <Routes>
        <Route element={<MainLayout />}>
          <Route path="/" element={<Home />} />
          <Route path="/books" element={<Books />} />
        </Route>
        <Route path="/login" element={<Login />} />
      </Routes>
    </BrowserRouter>
  );

  export default AppRoutes;
  ```

* `src/App.tsx`:

  ```tsx
  import AppRoutes from "./routes";
  function App() {
    return <AppRoutes />;
  }
  export default App;
  ```

---

### 5. **Xây dựng từng phần**

1. **Navbar + Layout** (components, layouts).
2. **Trang Auth (Login/Register)** → gọi API backend.
3. **Trang Books** → hiển thị list sách từ API.
4. **Trang Book Detail** → fetch 1 sách theo id.
5. **Cart** → thêm/xoá sách.
6. **Checkout / Payment** (nếu có).

---

### 6. **State management**

* Nếu project nhỏ → `useState`, `useContext`.
* Nếu lớn hơn → `Redux Toolkit` hoặc `Zustand`.

---

### 7. **Refactor & Optimize**

* Gom API call vào `src/api`.
* Gom type vào `src/types`.
* Gom logic chung vào `hooks` & `utils`.
* Tách component để tái sử dụng.

---

👉 Tóm gọn **thứ tự code**:

1. Setup project (Vite, Tailwind, Router, Axios).
2. Tạo cấu trúc thư mục.
3. Config API base.
4. Code layout + route cơ bản.
5. Code trang Auth.
6. Code trang Books, Book detail.
7. Code Cart & các tính năng khác.
8. Thêm state management + refactor.

---

Bạn muốn mình **viết sẵn bộ khung React + TS + Tailwind + Router + Axios** (cấu trúc chuẩn để bắt đầu code bookstore) không?
